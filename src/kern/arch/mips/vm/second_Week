1) MIPS Translation Lookaside Buffer (TLB) management
------------------------------------------------------

1. There are four different segments of the MIPS address space which are
    kseg2, TLB-mapped cacheable kernel space
    kseg1, direct-mapped uncached kernel space
    kseg0, direct-mapped cached kernel space
    kuseg, TLB-mapped cacheable user space 

Both direct-mapped segments map to the first 512 megabytes of the physical address space.
The top of kuseg is 0x80000000. The top of kseg0 is 0xa0000000, and the top of kseg1 is 0xc0000000.
The memory map thus looks like this:
-------------------------------------------------------------
    Address 	Segment 	Special properties
    0xffffffff 	kseg2 	 
    0xc0000000 	 
    0xbfffffff 	kseg1 	 
    0xbfc00180 	Exception address if BEV set.
    0xbfc00100 	UTLB exception address if BEV set.
    0xbfc00000 	Execution begins here after processor reset.
    0xa0000000 	 
    0x9fffffff 	kseg0 	 
    0x80000080 	Exception address if BEV not set.
    0x80000000 	UTLB exception address if BEV not set.
    0x7fffffff 	kuseg 	 
    0x00000000 	 
---------------------------------------------------------------


2. MIPS specific TLB access functions:
*   tlb_random: write the TLB entry specified by ENTRYHI and ENTRYLO
        into a "random" TLB slot chosen by the processor.

        IMPORTANT NOTE: never write more than one TLB entry with the
        same virtual page field.

*   tlb_write: same as tlb_random, but you choose the slot.

*   tlb_read: read a TLB entry out of the TLB into ENTRYHI and ENTRYLO.
        INDEX specifies which one to get.

*   tlb_probe: look for an entry matching the virtual page in ENTRYHI.
        Returns the index, or a negative number if no matching entry
        was found. ENTRYLO is not actually used, but must be set; 0
        should be passed.
   
   
        
3. PAGE_SIZE  4096         /* size of VM page */
   PAGE_FRAME 0xfffff000   /* mask for getting page number from addr */
   
   
4. USERSTACK = USERSPACETOP = MIPS_KSEG0 = 0x80000000
The starting value for the stack pointer at user level.  Because
the stack is subtract-then-store, this can start as the next
address after the stack area.

We put the stack at the very top of user virtual memory because it
grows downwards.


5. 
c0_entrylo  $2          /* TLB entry contents (low-order half) */
c0_entryhi  $10          /* TLB entry contents (high-order half) */


6. The various as_* functions are used to manipulate addess spaces. Using them, we can
create, activate copy, destroy address spaces and do some additional functions too.

as_prepare_load() - prepares the address space for loading by clearing contents previously present
in that space. (using the bzero function)

as_complete_load() - does nothing as of now



7. vm_fault() - Called from trap.c in case of FAULT_READ, FAULT_WRITE and FAULT_READ_ONLY.
It is defined in dumbvm.c. 
It iterates over all TLB entries checking for an entry which is invalid. If one is found, it replaces the existing page
with the required page. Otherwise it prints a message saying that it cannot handle the page fault. Needs to be improved.




8. Page size = 4 KB - hence offset is of 2^12 bits = 3 hex digits
Therefore the last 3 digits in the logical address are the offset
and out of the first three we get the page number.


